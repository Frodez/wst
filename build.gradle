/*
 * This file was generated by the Gradle 'init' task.
 */
import java.nio.file.Paths

plugins {
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

description = 'Windows Small Toolkits'
version = '1.0.0'
group = 'info.wst'

java {
    modularity.inferModulePath = true
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    implementation 'net.java.dev.jna:jna-jpms:5.13.0'
    implementation 'net.java.dev.jna:jna-platform-jpms:5.13.0'
}

javafx {
    version = '21'
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

ext.pathString = { path ->
    return '"' + path.toString() + '"'
}

ext.getModulePath = { ->
    def modules = configurations.runtimeClasspath.asList()
    modules.add(jar.archiveFile.get())
    return modules.join(File.pathSeparator)
}

ext.javaMainPackage = 'info.wst'
ext.javaMainModule = 'info.wst'
ext.javaMainClass = 'info.wst.executable.App'

ext.wst = [
    arguments : [
        enableLog : '--enable-log'
    ]
]

ext.graalvm = [
    getHome : { -> 
        def envName = 'GRAALVM_HOME'
        def graalvmHome = System.getenv(envName)
        if (graalvmHome == null) {
            throw new Exception("environment variable ${envName} not found")
        }
        return file(graalvmHome)
    },
    getJavaExecutable : { ->
        return file(Paths.get(graalvm.getHome().toString(), 'bin', 'java.exe'))
    },
    getNativeImageExecutable : { ->
        return file(Paths.get(graalvm.getHome().toString(), 'bin', 'native-image.cmd'))
    },
    getBaseDir : { ->
        return layout.projectDirectory.dir('graal')
    },
    output : [
        getDir : { ->
            return layout.projectDirectory.dir('output')
        },
        getBuildOutputFile : { ->
            def fileName = graalvm.nativeImageConfig.imageName + '-' + version + '-amd64'
            return graalvm.output.getDir().dir(fileName).toString()
        },
    ],
    nativeImageConfig : [
        imageName : 'Windows Small Toolkits',
        getConfigMergeDir : { ->
            return graalvm.getBaseDir().dir('native-image')
        },
        getReflectionConfigurationFiles : { ->
            return graalvm.nativeImageConfig.getConfigMergeDir().dir('reflect-config.json')
        },
        getJNIConfigurationFiles : { ->
            return graalvm.nativeImageConfig.getConfigMergeDir().dir('jni-config.json')
        },
        getResourceConfigurationFiles : { ->
            return graalvm.nativeImageConfig.getConfigMergeDir().dir('resource-config.json')
        },
        getDynamicProxyConfigurationFiles : { ->
            return graalvm.nativeImageConfig.getConfigMergeDir().dir('proxy-config.json')
        },
        getSerializationConfigurationFiles : { ->
            return graalvm.nativeImageConfig.getConfigMergeDir().dir('serialization-config.json')
        },
        getAccessFilterFile : { ->
            return graalvm.nativeImageConfig.getConfigMergeDir().dir('filter-file.json')
        }
    ]
]

jar {
    manifest {
        attributes 'Main-Class': javaMainClass
    }

    doLast {
        project.exec {
            workingDir destinationDirectory.get()
            executable 'jar'
            args '--update'
            args '--file', archiveFileName.get()
            args '--main-class', javaMainClass
            args '--module-version', version
        }
    }
}

task runApp(type:JavaExec) {

    dependsOn jar

    def modulePath = getModulePath().split(File.pathSeparator)

    modularity.inferModulePath = true
    classpath = files(modulePath)
    mainModule = javaMainModule

    args wst.arguments.enableLog

}

task cleanNativeImageData(type:Delete) {
    delete graalvm.nativeImageConfig.getConfigMergeDir()
}

task runAgent(type:Exec) {
    def graalvmExecutable = pathString(graalvm.getJavaExecutable())
    def agentArgument = '-agentlib:native-image-agent=config-merge-dir=' + 
        pathString(graalvm.nativeImageConfig.getConfigMergeDir())
    def modulePathArgument = '--module-path ' + pathString(getModulePath())
    def moduleArgument = '--module ' + javaMainModule + "/" + javaMainClass
    def enableLogArgument = wst.arguments.enableLog

    def cmdScript = '"' + [
        graalvmExecutable, 
        agentArgument, 
        modulePathArgument, 
        moduleArgument,
        enableLogArgument,
    ].join(' ') + '"'

    args = ['/c', cmdScript]

    dependsOn jar
    workingDir layout.projectDirectory
    executable 'cmd.exe'
    
    ignoreExitValue true

    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()

    ext.output = {
        return errorOutput.toString()
    }

    doFirst {
        mkdir graalvm.nativeImageConfig.getConfigMergeDir()
    }

    doLast {
        System.out.println(standardOutput.toString())
        System.err.println(errorOutput.toString())
    }
}

task buildNativeImage(type:Exec) {
    def nativeImageExecutable = pathString(graalvm.getNativeImageExecutable())
    def baseArgument = [
        '--verbose', 
        '-H:+JNI', 
        '-H:+UnlockExperimentalVMOptions',
    ].join(' ')
    def platformArgument = '-Dsvm.platform=org.graalvm.nativeimage.Platform$WINDOWS_AMD64'
    def optimizationArgument = [
        '-Djdk.internal.lambda.eagerlyInitialize=true',
        //'-O3',
    ].join(' ')
    def debugArgument = [
        '-H:+ReportExceptionStackTraces', 
        '-H:+BuildReport', 
        //'-g',
    ].join(' ')
    def runtimeMemoryArgument = [
        '-R:MaxHeapSize=128m', 
    ].join(' ')
    def configurationFilesArgument = [
        '-H:ReflectionConfigurationFiles=' + pathString(graalvm.nativeImageConfig.getReflectionConfigurationFiles()),
        '-H:JNIConfigurationFiles=' + pathString(graalvm.nativeImageConfig.getJNIConfigurationFiles()),
        '-H:ResourceConfigurationFiles=' + pathString(graalvm.nativeImageConfig.getResourceConfigurationFiles()),
        '-H:DynamicProxyConfigurationFiles=' + pathString(graalvm.nativeImageConfig.getDynamicProxyConfigurationFiles()),
        '-H:SerializationConfigurationFiles=' + pathString(graalvm.nativeImageConfig.getSerializationConfigurationFiles()),
    ].join(' ')
    def modulePathArgument = '--module-path ' + pathString(getModulePath())
    def moduleArgument = '--module ' + javaMainModule + "/" + javaMainClass
    def imageNameArgument = '-o ' + pathString(graalvm.output.getBuildOutputFile())

    def cmdScript = '"' + [
        nativeImageExecutable, 
        baseArgument, 
        platformArgument, 
        optimizationArgument, 
        debugArgument, 
        runtimeMemoryArgument, 
        configurationFilesArgument, 
        modulePathArgument, 
        moduleArgument, 
        imageNameArgument, 
    ].join(' ') + '"'

    args = ['/c', cmdScript]

    dependsOn jar
    workingDir layout.projectDirectory
    executable 'cmd.exe'

    ignoreExitValue true

    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()

    doLast {
        System.out.println(standardOutput.toString())
        System.err.println(errorOutput.toString())
    }
}